#!/bin/bash
#
# wplinux
#
# Version     1.3.4
# History:    2020-05-25, 2023-09-24, 2023-09-29, 2023-10-01, 2023-10-03, 2023-10-04
#
# Project Description:
#
# Read information from German Wikipedia articles about Unix and Linux commands
# in the bash shell.
#
# Wikipedia uses information boxes called navigation boxes for presenting links
# to Wikipedia articles about UNIX or GNU core linux commands. This script
# reads and parses those two navigation boxes and tries to display the
# beginning of the articles in text mode.
#
# Author:     Bernd Storck
# Contact:    https://www.facebook.com/BStLinux/
#
# Copyright:  2023, Bernd Storck
# License:    GNU General Public License 3.0
#

# Global Variables and Constants: ....................

readonly TITLE=" |===–  FRAGE WIKIPEDIA NACH LINUX  –===| "

readonly PROG_NAME="WpLinux"
readonly ORIGINAL_SCRIPT_NAME="wplinux"
readonly CURRENT_SCRIPT_NAME="${0##*/}"  ## Name of the script file
readonly VERSION="1.3.4"
readonly VERSIONS_TIME_STAMP="2023-09-30 08:48:23"  # date +"%Y-%m-%d %T"

readonly UNIX_LINKS_SOURCE="https://de.wikipedia.org/wiki/Benutzer:Benji/Unix/Vorlage:Navigationsleiste_Unix-Befehle"
readonly GNU_LINKS_SOURCE="https://de.wikipedia.org/wiki/Vorlage:Navigationsleiste_Befehle_der_GNU_core_utilities"


readonly WHITE="\e[1;37m"
readonly BLUE="\e[1;34m"
readonly COLOROFF="\e[0m"

# db="$(ls -1 ~/.wplinux)"

declare categories=
declare articles=

declare chosenCommandSet=
declare chosenCategory=
declare chosenArticle=

declare current_color=

declare dataDir="/tmp/"
declare prefixTableGNU="${dataDir}wplinux-tableGNU-"
declare prefixTableUNIX="${dataDir}wplinux-tableUNIX-"
# declare tableGNU="${prefixTableGNU}$(date -u +"%Y-%m-%d")"'.tmp'
declare tableGNU
tableGNU="${prefixTableGNU}$(date -u +"%Y-%m-%d")"'.tmp'
# declare tableUNIX="${prefixTableUNIX}$(date -u +"%Y-%m-%d")"'.tmp'
declare tableUNIX
tableUNIX="${prefixTableUNIX}$(date -u +"%Y-%m-%d")"'.tmp'
# echo "$dataDir"
# echo "$prefixTableGNU"
# echo "$prefixTableUNIX"
# echo "$tableGNU"
# echo "$tableUNIX"


# Functions: -----------------------------------------

usage() {
  echo -e "\n $PROG_NAME ($PROG_VERSION)

 Wenn \"datei\" der Name einer Textdatei ist, dann extrahiert der Befehl
 \"sample 200 datei\" 200 Zeilen aus \"datei\" und schreibt sie in eine
 Datei namens \"samples.txt\".

 Das Skript wurde erstellt, um die Struktur der Datensätze in einer
 Flat-File-Datenbank mit ca. 200000 Datensätzen zu untersuchen.

 AUFRUF
\t$CURRENT_SCRIPT_NAME <WIE_VIELE_ZEILEN_EXTRAHIEREN> <NAME_DER_EINGABEDATEI>

 BEISPIEL
\t$CURRENT_SCRIPT_NAME 200 dictverbs.txt\n"

}


cls() {
  clear
  echo -e "\n$TITLE\n"
}


selectCommandSet () {
# Legt fest, welches Set von Kommandos angezeigt werden soll. GNU- oder UNIX-Kommandos?
# Gibt den Wert fuer die globale Bariabel chosenCommandSet zurueck.

  # Die Variable local macht die Variable nur innerhalb der Funktion gültig
  local chosenCommandSetNum

  while true; do
    cls
    echo -e " Wählen Sie eine Befehlsliste durch ${current_color}Eingabe der angezeigten Nummer!$COLOROFF"
    echo -e "
      (${current_color}1$COLOROFF) GNU Core Commands

      (${current_color}2$COLOROFF) UNIX Commands

      (${current_color}3$COLOROFF) Ende / Quit
    "
    current_color="$COLOROFF"

    chosenCommandSet=
      read -rp " ?: " chosenCommandSetNum
      case "$chosenCommandSetNum" in
        1) chosenCommandSet="GNU"  ;;
        2) chosenCommandSet="UNIX" ;;
        3) exit 0        ;;
        *)
            current_color="$WHITE"
    #     echo -e "\n$WHITE Wählen Sie eine Zahl aus {1, 2, 3}! $COLOROFF" > /dev/stderr
            printf "\n%b %s %b" "$WHITE" "Wählen Sie eine Zahl aus {1, 2, 3}!" "$COLOROFF" > /dev/stderr
            sleep 1.5
            ;;
      esac

    [[ "$chosenCommandSet" =~ GNU|UNIX ]] && break

  done
}


show_menu () {
# Zeigt das Menue zur Auswahl der Befehlsliste an.
#
  cls
  echo -e " Wählen Sie eine Befehlsliste durch ${current_color}Eingabe der angezeigten Nummer!$COLOROFF"
  echo -e "
    (${current_color}1$COLOROFF) GNU Core Commands

    (${current_color}2$COLOROFF) UNIX Commands

    (${current_color}3$COLOROFF) Ende / Quit
  "
  current_color="$COLOROFF"
}


getTableRows() {
# Gets the table rows with the relevant data from de.Wikipedia:
#
# Wikipedia uses information boxes called navigation boxes for
# presenting links to Wikipedia articles about UNIX or GNU core linux
# commands. This script reads and parses those two navigation boxes and
# tries to display the beginning of the articles in text mode.

  local currentWikiTable="table${1}"
  local source_page
  local_source_copy='wplinux-source_'"$(date -u +"%Y-%m-%d")"'.tmp'

  # Removes obviously unusable files, which are nearly empty:
  if [ -f "${!currentWikiTable}" ] && (( "$(wc --bytes < "${!currentWikiTable}")" < 20 )); then
    rm -f "${!currentWikiTable}"
  fi

  if ! test -f "${!currentWikiTable}"; then
    # echo "creates new file"

    # Set the address for the web page, which is the source for the used links:
    if [ "$1" = "UNIX" ]; then
      source_page="$UNIX_LINKS_SOURCE"
    else
      source_page="$GNU_LINKS_SOURCE"
    fi

    # Download data source, the web page with the link list:
    download_ok=false
    until "$download_ok"; do
      wget --quiet --output-document="$local_source_copy" "$source_page"
      download_ok=true
      sleep 2
    done

    # Extract central table of the web page with the relevant data:
    grep -m1 -A9999 '<tbody' "$local_source_copy" |\
    grep -B9999 '</tbody' |\
    sed '/tbody/d' |\
    sed '/^[[:blank:]]*$/d' > "${!currentWikiTable}"
    echo "##EOF##" >> "${!currentWikiTable}"

  else
    # echo "Copies existing file"
    cp "${!currentWikiTable}" "$local_source_copy"
  fi
}


getCategories () {
# The categories of commands are in a td field of the input table which
# contains only the category name included in a the HTML bold tag.
# Something like this "<td [...]><b>category name</b>[...]</td>.
#
# Fills the global variable 'categories' with a list of the found categories.

  local currentWikiTable="table${1}"

  categories=
  if [ "$1" = "UNIX" ]; then
    categories="$( grep -F -A1 '<tr>' "${!currentWikiTable}" | sed -En '/^<td /s/^.*\">(.*):$/\1/p' )"
  else
#   categories="$( sed -En '/^<td /s:^.*<b>(.*)</b>$:\1:p' "${!currentWikiTable}" )";
    categories="$( sed -En '/^<td /s:^.*<b>(.*)</b>$:\1:p' "${!currentWikiTable}" | sed 's/^[[:blank:]]*//' | sed '/^$/d' )";
  fi
}


getCategorizedCommands () {
# Generates a key-value list with the command as key and the relative
# wikipedia address for the article. Result is a list with rows like
# "join:Join_(Unix)".

  local currentWikiTable="table${1}"
  local current_category="$2"

  if [ "$1" = "UNIX" ]; then     # UNIX Commands:
    articles="$(\
      grep -m1 -E -A9999 "^<td\b[^>]*\">(${current_category}):$" "${!currentWikiTable}" |\
      tail -n +3 | \
      grep -m1 -E -B9999 '(</tr>|##EOF##)' |\
      head -n -1 | \
      sed 's:<a href=:\n<a href=:g' |\
      grep '^<a href=' | \
      sed '/\(Seite nicht vorhanden\)/d' |\
      sed -E '/^<a href=/s;^.*/wiki/([^"]*)".*>([[:alnum:]]*)</a>.*$;\2:\1;' \
      )"
  else                 # GNU Core Commands:
    articles="$(\
      grep -m1 -E -A9999 "^<td .*<b>(.*${current_category}.*)</b>$" "${!currentWikiTable}" |\
      tail -n +3 | \
      grep -m1 -E -B9999 "^(<td .*<b>.*</b>|##EOF##)$" |\
      head -n -1 | \
      grep -F '<a href=' |\
      sed -E '/^(<p>)?<a href=/s;^.*/wiki/([^"]*)".*>([[:alnum:]]*)</a>.*$;\2:\1;' \
    )"
  fi
  wikiTable="${!currentWikiTable}"
}


ask4Selection () {
# Eine nummerische Eingabe abfragen und unzulaessige Eingaben abweisen.
#
  local lastAllowedNumber="$1"
  local regexList
  local allowedNumbers
  local selectionOk

  regexList=$(seq 1 $lastAllowedNumber | tr '\n' '|')
  regexList="${regexList%*|}"
  allowedNumbers="${regexList//|/, }"
  selectionOk=false
  echo
  until [ "$selectionOk" = true ]; do
    read -r -p " ?: "
    if [[ "$REPLY" =~ ^($regexList)$ ]]; then
      selectionOk=true
    else
      selectionOk=false
      printf "\n HINWEIS: Geben sie eine der aufgeführten Nummern ein! {%s}\n" "$allowedNumbers" > /dev/stderr
    fi
  done
  echo "$REPLY"
}


ask4Exit () {
  echo -en "\n Weiter mit [Enter], Abbruch mit 'q' oder 'e': "
  read -r
  case "$REPLY" in
    [Qq]|[Ee]|quit|end|Ende)
      quit 0
      ;;
    *)
      cls
      ;;
  esac
}


quit () {
  clear
  exit "$1"
}


# Main: = = = = = = = = = = = = = = = = = = = = = = =

while true; do

  selectCommandSet  # Der Anwender waehlt ein Kommandoset, entweder UNIX- oder GNU-Kommandos.

  getTableRows  "$chosenCommandSet"
  getCategories "$chosenCommandSet" # Speichert in der Textvariablen 'categories' die Liste der Kategorien.

  cls
  echo -e " Wählen Sie durch Eingabe der zugehörigen Nummer einen Themenbereich!\n"
  categoryArray=()
  count=0
  for i in $categories; do
    count=$(( count + 1 ))
    echo -e "\t$count) $i";
    categoryArray["$count"]="$i"
  done

  # Eingabe abfragen und unzulaessige Eingaben abweisen:
  list=$(seq 1 ${#categoryArray[@]} | tr '\n' '|')
  list="${list%*|}"
  allowedNumbers="${list//|/, }"
  selectionOk=false
  echo
  until [ "$selectionOk" = true ]; do
    read -r -p " ?: " chosenCategoryIndexNumber
    if [[ "$chosenCategoryIndexNumber" =~ ^($list)$ ]]; then
      selectionOk=true
    else
      selectionOk=false
      printf "\n HINWEIS: Geben sie eine der aufgeführten Nummern ein! {%s}\n" "$allowedNumbers"
    fi
  done

  chosenCategory="${categoryArray["$chosenCategoryIndexNumber"]}"

  # Speichert eine Liste mit Reihen wie "join:Join_(Unix)" in die globalke Variabel 'articles':
  getCategorizedCommands "$chosenCommandSet" "$chosenCategory"

  count=0
  article_keys=   # Wird mit jedem neuen Menueaufruf erst geleert und anschliessend neu gefuellt.
  for i in ${articles}; do
    count=$(( count + 1 ))
    commandKeyArray[  "$count" ]="$(cut -d: -f1 <<< "$i")"
    commandLinkArray[ "$count" ]="$(cut -d: -f2 <<< "$i")"
    article_keys="${article_keys}$(cut -d: -f1 <<< "$i")..(${count})"
    if [ $(( count % 3 )) -ne 0 ]; then
      separator="\n"
    else
      separator="\n"
    fi
    article_keys="${article_keys}${separator}"
  done
  article_keys="${article_keys}\n"

  cls
  echo -e " Wählen Sie durch Eingabe der zugehörigen Nummer einen Wikipedia-Artikel!\n"
  echo -e "$(echo -e "$article_keys" | columns -I4 -c3 -w20 --line-separation="\n")"

  # was: echo; read -r -p " ?: " chosenArticleIndexNumber
  chosenArticleIndexNumber="$(ask4Selection $count)"

  if [ "$(grep -F -c '#' <<< "${commandLinkArray["$chosenArticleIndexNumber"]}")" -eq 0 ]; then
      wikisearch="${commandLinkArray["$chosenArticleIndexNumber"]}"
  else
      wikilink="https://de.wikipedia.org/wiki/"${commandLinkArray["$chosenArticleIndexNumber"]}""
  fi

  # For links, which are going to a subsection of a wikipedia article, the
  # script tries to start one of the webbrowsers "links2", "lynx" or "elinks".
  if [ "$wikilink" ]; then
    if command -v links2 > /dev/null 2>&1; then
      webbrowser="links2"
    elif command -v lynx > /dev/null 2>&1; then
      webbrowser="lynx -nocolor"
    elif command -v elinks > /dev/null 2>&1; then
      webbrowser="elinks"
    fi

    eval "$webbrowser" '$wikilink'

  else  # ...........................  # For commands, which have an own Wikipedia article.

    wikipedia2text -l de "$wikisearch" > /tmp/wplinux.tmp
    if grep -q "^Inhaltsverzeichnis" /tmp/wplinux.tmp; then
      # echo "Inhaltsverzeichnis"
      filter_02='grep -F -m1 -B400 "Inhaltsverzeichnis"'
      filter_04="cat"
    else
      filter_02="cat"
      if grep -q "Weblinks" /tmp/wplinux.tmp; then
        # echo "Weblinks"
        # filter_04="grep -m1 -E -B9999 '^Weblinks[[:blank:]]*$'"
        filter_04="grep -m1 -E -B9999 '^Weblinks[[:blank:]]*$'"
      else
        filter_04="cat"
      fi
    fi


  # wikipedia2text -l de "$wikisearch" | grep -m1 "^Weblinks" |\
  # sed -E 's/^(.*)[[:blank:]]*\[Bearbeiten \| Quelltext bearbeiten\]$/\1 \2/' |\
  # sed -E 's:^(.*)$:##\1##:' | od -a
  # exit


    eval "$filter_02" < /tmp/wplinux.tmp |\
    sed '/^[[:blank:]]*Link:/d' |\
    sed '/aus Wikipedia, der freien Enzyklopädie/d' |\
    sed -E '/Zur (Navigation|Suche) springen/d' |\
    sed -E 's/^(.*)[[:blank:]]*\[Bearbeiten \| Quelltext bearbeiten\][[:blank:]]*/\1/' |\
    eval "$filter_04" |\
        sed -E 's/^(.*)[[:blank:]]*$/\1/' |\
    sed -E 's/^[^a-zA-Z]*$//' |\
        sed -E '/^[[:blank:]]*Abgerufen vo/d' |\
    sed 's/\^//g' |\
    sed -e '$d' |\
    less -s -P ' q = Beenden  (Anzeige durch den Pager "less")'
  fi

  ask4Exit

done
